<?xml version="1.0" encoding="utf-8"?>
<ScrollView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:scrollbars="none"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content">
<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".UnitThree.Part1Fragment">


    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginLeft="30dp"
        android:layout_marginTop="30dp"
        android:textStyle="bold"
        android:textSize="25sp"
        android:text="Android Layout Types" />

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginHorizontal="30dp"
        android:layout_marginTop="70dp"
        android:letterSpacing="0.04"
        android:lineSpacingExtra="3dp"
        android:justificationMode="inter_word"
        android:text="A layout defines the structure for a user interface in your app, such as in an activity. All
elements in the layout are built using a hierarchy of View and ViewGroup objects. A View
usually draws something the user can see and interact with. Whereas a ViewGroup is an
invisible container that defines the layout structure for View and other ViewGroup objects,
as shown in figure." />

    <ImageView
        android:layout_width="match_parent"
        android:layout_height="296dp"
        android:layout_marginTop="195dp"
        android:src="@drawable/view" />
    <LinearLayout
        xmlns:android="http://schemas.android.com/apk/res/android"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:orientation="vertical"
        android:layout_marginTop="440dp"
        android:padding="16dp">

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="You can declare a layout in two ways:"

            android:paddingBottom="8dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="1. Declare UI elements in XML:"
            android:textStyle="bold"

            android:paddingBottom="8dp" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:letterSpacing="0.04"
            android:lineSpacingExtra="3dp"
            android:justificationMode="inter_word"
            android:text=" Android provides a straightforward XML vocabulary that corresponds to the View classes and subclasses, such as those for widgets and layouts. You can also use Android Studio's Layout Editor to build your XML layout using a drag-and-drop interface."

            android:paddingBottom="8dp" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="2. Instantiate layout elements at runtime:"
            android:textStyle="bold"
            android:paddingBottom="8dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:letterSpacing="0.04"
            android:lineSpacingExtra="3dp"
            android:text=" Your app can create View and ViewGroup objects (and manipulate their properties) programmatically."
            />

    </LinearLayout>

</FrameLayout>
</ScrollView>
